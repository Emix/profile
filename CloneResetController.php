<?php
/**
 * @link http://www.yiiframework.com/
 * @copyright Copyright (c) 2008 Yii Software LLC
 * @license http://www.yiiframework.com/license/
 */

namespace app\commands;

use app\models\Description;
use app\models\ObjectModel;
use app\models\ObjectRelDescription;
use app\models\ObjectRelSale;
use app\models\ObjectRelType;
use app\models\Project;
use app\models\ProjectsDescription;
use app\models\Type;
use rico\yii2images\models\Image;
use Yii;
use yii\base\ErrorException;
use yii\console\Controller;
use yii\console\ExitCode;
use yii\db\Query;
use yii\i18n\Formatter;

/**
 * This command echoes the first argument that you have entered.
 *
 * This command is provided as an example for you to learn how to create console commands.
 *
 * @author Qiang Xue <qiang.xue@gmail.com>
 * @since 2.0
 */
class CloneResetController extends Controller
{
	public function init() {
		ob_start();
		parent::init(); // TODO: Change the autogenerated stub
	}

	static private function e($msg = ''){
		if(is_array($msg)){
			echo print_r($msg, 1) . PHP_EOL;

		}else{
			echo $msg .PHP_EOL;
		}

		ob_flush();
	}

	static function imageCopy(ObjectModel $parent, ObjectModel $clone){

		if($parentImages = Image::findAll([
			'modelName'=>'ObjectModel',
			'itemId'=>$parent->id
		])){
			if(sizeof($parentImages) > 0){
				//Удаляем все картинки клона
				Image::deleteAll([
					'modelName'=>'ObjectModel',
					'itemId'=>$clone->id
				]);

				Image::deleteAll([
					'modelName'=>'Object',
					'itemId'=>$clone->id
				]);

				//Добавляем от родителя
				foreach ($parentImages as $image){
					$cloneImage             = new Image();
					$cloneImage->filePath   = $image->filePath;
					$cloneImage->isMain     = $image->isMain;
					$cloneImage->modelName  = $image->modelName;
					$cloneImage->urlAlias   = $image->urlAlias;
					$cloneImage->sort       = $image->sort;
					$cloneImage->itemId     = $clone->id;
					$cloneImage->save();
				}
			}
		}
	}

    /**
     * Синхронизирует тексты оригинала и клона
     *
     * @param ObjectModel $parent
     * @param ObjectModel $clone
     */
	static function textCopy(ObjectModel $parent, ObjectModel $clone) {
        $parentTexts = ObjectRelDescription::findAll([
            'object_id'=>$parent->id
        ]);

        $cloneTexts = ObjectRelDescription::findAll([
            'object_id'=>$clone->id
        ]);

        $foundIds = [];
        $newCloneTextsList = [];

        foreach ($parentTexts as $parentText) {
            $isFound = false;
            foreach ($cloneTexts as $cloneText) {
                if ($parentText->place_id == $cloneText->place_id
                    && $parentText->type_id == $cloneText->type_id
                    && $parentText->text_id == $cloneText->text_id
                ) {
                    $isFound = true;

                    // Если текст найден в клоне, то его нельзя удалять
                    if (!in_array($cloneText->id, $foundIds)) {
                        $foundIds[] = $cloneText->id;
                    }
                }
            }

            // Если текст в клоне не найден, то добавляем его
            if (!$isFound) {
                $newCloneText = new ObjectRelDescription();
                $newCloneText->project_id = $parentText->project_id;
                $newCloneText->text_id    = $parentText->text_id;
                $newCloneText->type_id    = $parentText->type_id;
                $newCloneText->place_id   = $parentText->place_id;
                $newCloneText->object_id  = $clone->id;
                $newCloneTextsList[] = $newCloneText;
            }
        }

        // Удаляем ненайденные тексты клона
        ObjectRelDescription::deleteAll(['and',
            ['object_id' => $clone->id],
            ['not in', 'id', $foundIds],
        ]);

        // Сохраняем новые записи
        foreach ($newCloneTextsList as $item) {
            $item->save();
        }
	}




    public function actionIndex() {
	    $clones = ObjectModel::find()->where('parent_id <> 0')->all();

	    foreach ($clones as $clone){
			$parent = ObjectModel::findOne($clone->parent_id);
		    echo('Копируем текст для #'.$clone->parent_id);
		    ob_flush();
		    self::textCopy($parent, $clone);
		    self::e('---OK');

	    }
    }

}
